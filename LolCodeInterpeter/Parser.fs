// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TROOF of (bool)
  | NUMBAR of (double)
  | NUMBR of (int)
  | YARN of (string)
  | IDENTIFIER of (string)
  | NOT
  | IS
  | NOW
  | GIMMEH
  | WTF
  | OMG
  | OMGWTF
  | PRODUKT
  | QUOSHUNT
  | BIGGR
  | SMALLR
  | MOD
  | GTFO
  | SAEM
  | DIFFRINT
  | SMOOSH
  | MKAY
  | MAEK
  | AN
  | DIFF
  | IM
  | IN
  | YR
  | TIL
  | WILE
  | OUTTA
  | UPPIN
  | NERFIN
  | BOTH
  | EITHER
  | MEBBE
  | HELLO
  | END
  | COMMA
  | EOF
  | I
  | HAZ
  | A
  | RRLY
  | RLY
  | OH
  | YA
  | OIC
  | NO
  | WAI
  | ITZ
  | R
  | SUM
  | OF
  | T_NUMBR
  | T_NUMBAR
  | T_TROOF
  | T_YARN
  | T_NOOB
  | PRINT
  | NEWLINE
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TROOF
    | TOKEN_NUMBAR
    | TOKEN_NUMBR
    | TOKEN_YARN
    | TOKEN_IDENTIFIER
    | TOKEN_NOT
    | TOKEN_IS
    | TOKEN_NOW
    | TOKEN_GIMMEH
    | TOKEN_WTF
    | TOKEN_OMG
    | TOKEN_OMGWTF
    | TOKEN_PRODUKT
    | TOKEN_QUOSHUNT
    | TOKEN_BIGGR
    | TOKEN_SMALLR
    | TOKEN_MOD
    | TOKEN_GTFO
    | TOKEN_SAEM
    | TOKEN_DIFFRINT
    | TOKEN_SMOOSH
    | TOKEN_MKAY
    | TOKEN_MAEK
    | TOKEN_AN
    | TOKEN_DIFF
    | TOKEN_IM
    | TOKEN_IN
    | TOKEN_YR
    | TOKEN_TIL
    | TOKEN_WILE
    | TOKEN_OUTTA
    | TOKEN_UPPIN
    | TOKEN_NERFIN
    | TOKEN_BOTH
    | TOKEN_EITHER
    | TOKEN_MEBBE
    | TOKEN_HELLO
    | TOKEN_END
    | TOKEN_COMMA
    | TOKEN_EOF
    | TOKEN_I
    | TOKEN_HAZ
    | TOKEN_A
    | TOKEN_RRLY
    | TOKEN_RLY
    | TOKEN_OH
    | TOKEN_YA
    | TOKEN_OIC
    | TOKEN_NO
    | TOKEN_WAI
    | TOKEN_ITZ
    | TOKEN_R
    | TOKEN_SUM
    | TOKEN_OF
    | TOKEN_T_NUMBR
    | TOKEN_T_NUMBAR
    | TOKEN_T_TROOF
    | TOKEN_T_YARN
    | TOKEN_T_NOOB
    | TOKEN_PRINT
    | TOKEN_NEWLINE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Program
    | NONTERM_StatementList
    | NONTERM_Statement
    | NONTERM_Print
    | NONTERM_Input
    | NONTERM_Switch
    | NONTERM_Cases
    | NONTERM_Case
    | NONTERM_DefaultCase
    | NONTERM_Conditional
    | NONTERM_Mebbe
    | NONTERM_Loop
    | NONTERM_LoopOperation
    | NONTERM_LoopTerminator
    | NONTERM_Variable
    | NONTERM_VariableInitializer
    | NONTERM_Unary
    | NONTERM_Expression
    | NONTERM_ExpressionList
    | NONTERM_Literal
    | NONTERM_BooleanOperator
    | NONTERM_ComparisonOperator
    | NONTERM_CalcOperator
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TROOF _ -> 0 
  | NUMBAR _ -> 1 
  | NUMBR _ -> 2 
  | YARN _ -> 3 
  | IDENTIFIER _ -> 4 
  | NOT  -> 5 
  | IS  -> 6 
  | NOW  -> 7 
  | GIMMEH  -> 8 
  | WTF  -> 9 
  | OMG  -> 10 
  | OMGWTF  -> 11 
  | PRODUKT  -> 12 
  | QUOSHUNT  -> 13 
  | BIGGR  -> 14 
  | SMALLR  -> 15 
  | MOD  -> 16 
  | GTFO  -> 17 
  | SAEM  -> 18 
  | DIFFRINT  -> 19 
  | SMOOSH  -> 20 
  | MKAY  -> 21 
  | MAEK  -> 22 
  | AN  -> 23 
  | DIFF  -> 24 
  | IM  -> 25 
  | IN  -> 26 
  | YR  -> 27 
  | TIL  -> 28 
  | WILE  -> 29 
  | OUTTA  -> 30 
  | UPPIN  -> 31 
  | NERFIN  -> 32 
  | BOTH  -> 33 
  | EITHER  -> 34 
  | MEBBE  -> 35 
  | HELLO  -> 36 
  | END  -> 37 
  | COMMA  -> 38 
  | EOF  -> 39 
  | I  -> 40 
  | HAZ  -> 41 
  | A  -> 42 
  | RRLY  -> 43 
  | RLY  -> 44 
  | OH  -> 45 
  | YA  -> 46 
  | OIC  -> 47 
  | NO  -> 48 
  | WAI  -> 49 
  | ITZ  -> 50 
  | R  -> 51 
  | SUM  -> 52 
  | OF  -> 53 
  | T_NUMBR  -> 54 
  | T_NUMBAR  -> 55 
  | T_TROOF  -> 56 
  | T_YARN  -> 57 
  | T_NOOB  -> 58 
  | PRINT  -> 59 
  | NEWLINE  -> 60 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TROOF 
  | 1 -> TOKEN_NUMBAR 
  | 2 -> TOKEN_NUMBR 
  | 3 -> TOKEN_YARN 
  | 4 -> TOKEN_IDENTIFIER 
  | 5 -> TOKEN_NOT 
  | 6 -> TOKEN_IS 
  | 7 -> TOKEN_NOW 
  | 8 -> TOKEN_GIMMEH 
  | 9 -> TOKEN_WTF 
  | 10 -> TOKEN_OMG 
  | 11 -> TOKEN_OMGWTF 
  | 12 -> TOKEN_PRODUKT 
  | 13 -> TOKEN_QUOSHUNT 
  | 14 -> TOKEN_BIGGR 
  | 15 -> TOKEN_SMALLR 
  | 16 -> TOKEN_MOD 
  | 17 -> TOKEN_GTFO 
  | 18 -> TOKEN_SAEM 
  | 19 -> TOKEN_DIFFRINT 
  | 20 -> TOKEN_SMOOSH 
  | 21 -> TOKEN_MKAY 
  | 22 -> TOKEN_MAEK 
  | 23 -> TOKEN_AN 
  | 24 -> TOKEN_DIFF 
  | 25 -> TOKEN_IM 
  | 26 -> TOKEN_IN 
  | 27 -> TOKEN_YR 
  | 28 -> TOKEN_TIL 
  | 29 -> TOKEN_WILE 
  | 30 -> TOKEN_OUTTA 
  | 31 -> TOKEN_UPPIN 
  | 32 -> TOKEN_NERFIN 
  | 33 -> TOKEN_BOTH 
  | 34 -> TOKEN_EITHER 
  | 35 -> TOKEN_MEBBE 
  | 36 -> TOKEN_HELLO 
  | 37 -> TOKEN_END 
  | 38 -> TOKEN_COMMA 
  | 39 -> TOKEN_EOF 
  | 40 -> TOKEN_I 
  | 41 -> TOKEN_HAZ 
  | 42 -> TOKEN_A 
  | 43 -> TOKEN_RRLY 
  | 44 -> TOKEN_RLY 
  | 45 -> TOKEN_OH 
  | 46 -> TOKEN_YA 
  | 47 -> TOKEN_OIC 
  | 48 -> TOKEN_NO 
  | 49 -> TOKEN_WAI 
  | 50 -> TOKEN_ITZ 
  | 51 -> TOKEN_R 
  | 52 -> TOKEN_SUM 
  | 53 -> TOKEN_OF 
  | 54 -> TOKEN_T_NUMBR 
  | 55 -> TOKEN_T_NUMBAR 
  | 56 -> TOKEN_T_TROOF 
  | 57 -> TOKEN_T_YARN 
  | 58 -> TOKEN_T_NOOB 
  | 59 -> TOKEN_PRINT 
  | 60 -> TOKEN_NEWLINE 
  | 63 -> TOKEN_end_of_input
  | 61 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Program 
    | 3 -> NONTERM_StatementList 
    | 4 -> NONTERM_StatementList 
    | 5 -> NONTERM_Statement 
    | 6 -> NONTERM_Statement 
    | 7 -> NONTERM_Statement 
    | 8 -> NONTERM_Statement 
    | 9 -> NONTERM_Statement 
    | 10 -> NONTERM_Statement 
    | 11 -> NONTERM_Statement 
    | 12 -> NONTERM_Statement 
    | 13 -> NONTERM_Statement 
    | 14 -> NONTERM_Statement 
    | 15 -> NONTERM_Print 
    | 16 -> NONTERM_Input 
    | 17 -> NONTERM_Switch 
    | 18 -> NONTERM_Cases 
    | 19 -> NONTERM_Cases 
    | 20 -> NONTERM_Cases 
    | 21 -> NONTERM_Case 
    | 22 -> NONTERM_DefaultCase 
    | 23 -> NONTERM_Conditional 
    | 24 -> NONTERM_Mebbe 
    | 25 -> NONTERM_Mebbe 
    | 26 -> NONTERM_Mebbe 
    | 27 -> NONTERM_Loop 
    | 28 -> NONTERM_LoopOperation 
    | 29 -> NONTERM_LoopOperation 
    | 30 -> NONTERM_LoopTerminator 
    | 31 -> NONTERM_LoopTerminator 
    | 32 -> NONTERM_LoopTerminator 
    | 33 -> NONTERM_Variable 
    | 34 -> NONTERM_Variable 
    | 35 -> NONTERM_Variable 
    | 36 -> NONTERM_VariableInitializer 
    | 37 -> NONTERM_VariableInitializer 
    | 38 -> NONTERM_Unary 
    | 39 -> NONTERM_Unary 
    | 40 -> NONTERM_Expression 
    | 41 -> NONTERM_Expression 
    | 42 -> NONTERM_Expression 
    | 43 -> NONTERM_Expression 
    | 44 -> NONTERM_Expression 
    | 45 -> NONTERM_Expression 
    | 46 -> NONTERM_ExpressionList 
    | 47 -> NONTERM_ExpressionList 
    | 48 -> NONTERM_Literal 
    | 49 -> NONTERM_Literal 
    | 50 -> NONTERM_Literal 
    | 51 -> NONTERM_Literal 
    | 52 -> NONTERM_Literal 
    | 53 -> NONTERM_BooleanOperator 
    | 54 -> NONTERM_BooleanOperator 
    | 55 -> NONTERM_ComparisonOperator 
    | 56 -> NONTERM_ComparisonOperator 
    | 57 -> NONTERM_CalcOperator 
    | 58 -> NONTERM_CalcOperator 
    | 59 -> NONTERM_CalcOperator 
    | 60 -> NONTERM_CalcOperator 
    | 61 -> NONTERM_CalcOperator 
    | 62 -> NONTERM_CalcOperator 
    | 63 -> NONTERM_Type 
    | 64 -> NONTERM_Type 
    | 65 -> NONTERM_Type 
    | 66 -> NONTERM_Type 
    | 67 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 63 
let _fsyacc_tagOfErrorTerminal = 61

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TROOF _ -> "TROOF" 
  | NUMBAR _ -> "NUMBAR" 
  | NUMBR _ -> "NUMBR" 
  | YARN _ -> "YARN" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | NOT  -> "NOT" 
  | IS  -> "IS" 
  | NOW  -> "NOW" 
  | GIMMEH  -> "GIMMEH" 
  | WTF  -> "WTF" 
  | OMG  -> "OMG" 
  | OMGWTF  -> "OMGWTF" 
  | PRODUKT  -> "PRODUKT" 
  | QUOSHUNT  -> "QUOSHUNT" 
  | BIGGR  -> "BIGGR" 
  | SMALLR  -> "SMALLR" 
  | MOD  -> "MOD" 
  | GTFO  -> "GTFO" 
  | SAEM  -> "SAEM" 
  | DIFFRINT  -> "DIFFRINT" 
  | SMOOSH  -> "SMOOSH" 
  | MKAY  -> "MKAY" 
  | MAEK  -> "MAEK" 
  | AN  -> "AN" 
  | DIFF  -> "DIFF" 
  | IM  -> "IM" 
  | IN  -> "IN" 
  | YR  -> "YR" 
  | TIL  -> "TIL" 
  | WILE  -> "WILE" 
  | OUTTA  -> "OUTTA" 
  | UPPIN  -> "UPPIN" 
  | NERFIN  -> "NERFIN" 
  | BOTH  -> "BOTH" 
  | EITHER  -> "EITHER" 
  | MEBBE  -> "MEBBE" 
  | HELLO  -> "HELLO" 
  | END  -> "END" 
  | COMMA  -> "COMMA" 
  | EOF  -> "EOF" 
  | I  -> "I" 
  | HAZ  -> "HAZ" 
  | A  -> "A" 
  | RRLY  -> "RRLY" 
  | RLY  -> "RLY" 
  | OH  -> "OH" 
  | YA  -> "YA" 
  | OIC  -> "OIC" 
  | NO  -> "NO" 
  | WAI  -> "WAI" 
  | ITZ  -> "ITZ" 
  | R  -> "R" 
  | SUM  -> "SUM" 
  | OF  -> "OF" 
  | T_NUMBR  -> "T_NUMBR" 
  | T_NUMBAR  -> "T_NUMBAR" 
  | T_TROOF  -> "T_TROOF" 
  | T_YARN  -> "T_YARN" 
  | T_NOOB  -> "T_NOOB" 
  | PRINT  -> "PRINT" 
  | NEWLINE  -> "NEWLINE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TROOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUMBAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUMBR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | YARN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOT  -> (null : System.Object) 
  | IS  -> (null : System.Object) 
  | NOW  -> (null : System.Object) 
  | GIMMEH  -> (null : System.Object) 
  | WTF  -> (null : System.Object) 
  | OMG  -> (null : System.Object) 
  | OMGWTF  -> (null : System.Object) 
  | PRODUKT  -> (null : System.Object) 
  | QUOSHUNT  -> (null : System.Object) 
  | BIGGR  -> (null : System.Object) 
  | SMALLR  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | GTFO  -> (null : System.Object) 
  | SAEM  -> (null : System.Object) 
  | DIFFRINT  -> (null : System.Object) 
  | SMOOSH  -> (null : System.Object) 
  | MKAY  -> (null : System.Object) 
  | MAEK  -> (null : System.Object) 
  | AN  -> (null : System.Object) 
  | DIFF  -> (null : System.Object) 
  | IM  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | YR  -> (null : System.Object) 
  | TIL  -> (null : System.Object) 
  | WILE  -> (null : System.Object) 
  | OUTTA  -> (null : System.Object) 
  | UPPIN  -> (null : System.Object) 
  | NERFIN  -> (null : System.Object) 
  | BOTH  -> (null : System.Object) 
  | EITHER  -> (null : System.Object) 
  | MEBBE  -> (null : System.Object) 
  | HELLO  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | I  -> (null : System.Object) 
  | HAZ  -> (null : System.Object) 
  | A  -> (null : System.Object) 
  | RRLY  -> (null : System.Object) 
  | RLY  -> (null : System.Object) 
  | OH  -> (null : System.Object) 
  | YA  -> (null : System.Object) 
  | OIC  -> (null : System.Object) 
  | NO  -> (null : System.Object) 
  | WAI  -> (null : System.Object) 
  | ITZ  -> (null : System.Object) 
  | R  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | T_NUMBR  -> (null : System.Object) 
  | T_NUMBAR  -> (null : System.Object) 
  | T_TROOF  -> (null : System.Object) 
  | T_YARN  -> (null : System.Object) 
  | T_NOOB  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 7us; 65535us; 4us; 5us; 47us; 8us; 49us; 9us; 55us; 10us; 60us; 11us; 63us; 12us; 72us; 13us; 14us; 65535us; 4us; 7us; 5us; 14us; 8us; 14us; 9us; 14us; 10us; 14us; 11us; 14us; 12us; 14us; 13us; 14us; 47us; 7us; 49us; 7us; 55us; 7us; 60us; 7us; 63us; 7us; 72us; 7us; 14us; 65535us; 4us; 15us; 5us; 15us; 8us; 15us; 9us; 15us; 10us; 15us; 11us; 15us; 12us; 15us; 13us; 15us; 47us; 15us; 49us; 15us; 55us; 15us; 60us; 15us; 63us; 15us; 72us; 15us; 14us; 65535us; 4us; 31us; 5us; 31us; 8us; 31us; 9us; 31us; 10us; 31us; 11us; 31us; 12us; 31us; 13us; 31us; 47us; 31us; 49us; 31us; 55us; 31us; 60us; 31us; 63us; 31us; 72us; 31us; 14us; 65535us; 4us; 21us; 5us; 21us; 8us; 21us; 9us; 21us; 10us; 21us; 11us; 21us; 12us; 21us; 13us; 21us; 47us; 21us; 49us; 21us; 55us; 21us; 60us; 21us; 63us; 21us; 72us; 21us; 1us; 65535us; 39us; 40us; 2us; 65535us; 39us; 42us; 40us; 43us; 1us; 65535us; 40us; 44us; 14us; 65535us; 4us; 19us; 5us; 19us; 8us; 19us; 9us; 19us; 10us; 19us; 11us; 19us; 12us; 19us; 13us; 19us; 47us; 19us; 49us; 19us; 55us; 19us; 60us; 19us; 63us; 19us; 72us; 19us; 2us; 65535us; 10us; 56us; 12us; 64us; 14us; 65535us; 4us; 23us; 5us; 23us; 8us; 23us; 9us; 23us; 10us; 23us; 11us; 23us; 12us; 23us; 13us; 23us; 47us; 23us; 49us; 23us; 55us; 23us; 60us; 23us; 63us; 23us; 72us; 23us; 1us; 65535us; 69us; 70us; 1us; 65535us; 70us; 71us; 14us; 65535us; 4us; 17us; 5us; 17us; 8us; 17us; 9us; 17us; 10us; 17us; 11us; 17us; 12us; 17us; 13us; 17us; 47us; 17us; 49us; 17us; 55us; 17us; 60us; 17us; 63us; 17us; 72us; 17us; 1us; 65535us; 84us; 85us; 15us; 65535us; 4us; 27us; 5us; 27us; 8us; 27us; 9us; 27us; 10us; 27us; 11us; 27us; 12us; 27us; 13us; 27us; 47us; 27us; 49us; 27us; 55us; 27us; 60us; 27us; 63us; 27us; 69us; 76us; 72us; 27us; 29us; 65535us; 4us; 25us; 5us; 25us; 8us; 25us; 9us; 25us; 10us; 25us; 11us; 25us; 12us; 25us; 13us; 25us; 34us; 121us; 47us; 25us; 49us; 25us; 55us; 25us; 60us; 25us; 61us; 62us; 63us; 25us; 72us; 25us; 77us; 78us; 79us; 80us; 87us; 88us; 93us; 94us; 102us; 103us; 104us; 105us; 106us; 107us; 108us; 109us; 110us; 111us; 112us; 113us; 114us; 121us; 117us; 118us; 122us; 123us; 2us; 65535us; 34us; 35us; 114us; 115us; 30us; 65535us; 4us; 101us; 5us; 101us; 8us; 101us; 9us; 101us; 10us; 101us; 11us; 101us; 12us; 101us; 13us; 101us; 34us; 101us; 45us; 46us; 47us; 101us; 49us; 101us; 55us; 101us; 60us; 101us; 61us; 101us; 63us; 101us; 72us; 101us; 77us; 101us; 79us; 101us; 87us; 101us; 93us; 101us; 102us; 101us; 104us; 101us; 106us; 101us; 108us; 101us; 110us; 101us; 112us; 101us; 114us; 101us; 117us; 101us; 122us; 101us; 29us; 65535us; 4us; 106us; 5us; 106us; 8us; 106us; 9us; 106us; 10us; 106us; 11us; 106us; 12us; 106us; 13us; 106us; 34us; 106us; 47us; 106us; 49us; 106us; 55us; 106us; 60us; 106us; 61us; 106us; 63us; 106us; 72us; 106us; 77us; 106us; 79us; 106us; 87us; 106us; 93us; 106us; 102us; 106us; 104us; 106us; 106us; 106us; 108us; 106us; 110us; 106us; 112us; 106us; 114us; 106us; 117us; 106us; 122us; 106us; 29us; 65535us; 4us; 110us; 5us; 110us; 8us; 110us; 9us; 110us; 10us; 110us; 11us; 110us; 12us; 110us; 13us; 110us; 34us; 110us; 47us; 110us; 49us; 110us; 55us; 110us; 60us; 110us; 61us; 110us; 63us; 110us; 72us; 110us; 77us; 110us; 79us; 110us; 87us; 110us; 93us; 110us; 102us; 110us; 104us; 110us; 106us; 110us; 108us; 110us; 110us; 110us; 112us; 110us; 114us; 110us; 117us; 110us; 122us; 110us; 29us; 65535us; 4us; 102us; 5us; 102us; 8us; 102us; 9us; 102us; 10us; 102us; 11us; 102us; 12us; 102us; 13us; 102us; 34us; 102us; 47us; 102us; 49us; 102us; 55us; 102us; 60us; 102us; 61us; 102us; 63us; 102us; 72us; 102us; 77us; 102us; 79us; 102us; 87us; 102us; 93us; 102us; 102us; 102us; 104us; 102us; 106us; 102us; 108us; 102us; 110us; 102us; 112us; 102us; 114us; 102us; 117us; 102us; 122us; 102us; 2us; 65535us; 91us; 92us; 119us; 120us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 13us; 28us; 43us; 58us; 73us; 75us; 78us; 80us; 95us; 98us; 113us; 115us; 117us; 132us; 134us; 150us; 180us; 183us; 214us; 244us; 274us; 304us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 2us; 2us; 2us; 4us; 1us; 2us; 1us; 3us; 2us; 4us; 21us; 2us; 4us; 22us; 2us; 4us; 23us; 2us; 4us; 25us; 2us; 4us; 26us; 2us; 4us; 27us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 2us; 15us; 47us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 3us; 17us; 19us; 20us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 2us; 27us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 29us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 3us; 34us; 35us; 52us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 44us; 2us; 44us; 47us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 45us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 2us; 53us; 55us; 1us; 53us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 59us; 1us; 59us; 1us; 60us; 1us; 60us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 13us; 15us; 17us; 20us; 23us; 26us; 29us; 32us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 118us; 120us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 140us; 142us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 179us; 181us; 183us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 246us; 248us; 250us; 252us; 254us; 256us; 258us; 260us; 262us; 264us; 266us; 268us; 270us; 272us; 275us; 277us; 279us; 281us; 283us; 285us; 287us; 289us; 291us; 293us; 295us; 297us; 299us; 301us; 303us; 305us; 307us; 309us; 311us; 313us; 315us; 317us; |]
let _fsyacc_action_rows = 152
let _fsyacc_actionTableElements = [|1us; 32768us; 36us; 3us; 0us; 49152us; 0us; 16385us; 1us; 32768us; 60us; 4us; 26us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 40us; 81us; 45us; 50us; 52us; 139us; 59us; 34us; 60us; 33us; 27us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 37us; 6us; 40us; 81us; 45us; 50us; 52us; 139us; 59us; 34us; 60us; 33us; 0us; 16386us; 0us; 16387us; 26us; 16405us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 40us; 81us; 45us; 50us; 52us; 139us; 59us; 34us; 60us; 33us; 26us; 16406us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 40us; 81us; 45us; 50us; 52us; 139us; 59us; 34us; 60us; 33us; 28us; 16408us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 35us; 61us; 40us; 81us; 45us; 50us; 48us; 58us; 52us; 139us; 59us; 34us; 60us; 33us; 26us; 16409us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 40us; 81us; 45us; 50us; 52us; 139us; 59us; 34us; 60us; 33us; 28us; 16408us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 35us; 61us; 40us; 81us; 45us; 50us; 48us; 58us; 52us; 139us; 59us; 34us; 60us; 33us; 26us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 66us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 40us; 81us; 45us; 50us; 52us; 139us; 59us; 34us; 60us; 33us; 0us; 16388us; 1us; 32768us; 60us; 16us; 0us; 16389us; 1us; 32768us; 60us; 18us; 0us; 16390us; 1us; 32768us; 60us; 20us; 0us; 16391us; 1us; 32768us; 60us; 22us; 0us; 16392us; 1us; 32768us; 60us; 24us; 0us; 16393us; 1us; 32768us; 60us; 26us; 0us; 16394us; 1us; 32768us; 60us; 28us; 0us; 16395us; 1us; 32768us; 60us; 30us; 0us; 16396us; 1us; 32768us; 60us; 32us; 0us; 16397us; 0us; 16398us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 1us; 16399us; 23us; 122us; 1us; 32768us; 4us; 37us; 0us; 16400us; 1us; 32768us; 60us; 39us; 1us; 32768us; 10us; 45us; 3us; 32768us; 10us; 45us; 11us; 48us; 47us; 41us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 5us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 1us; 32768us; 60us; 47us; 26us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 40us; 81us; 45us; 50us; 52us; 139us; 59us; 34us; 60us; 33us; 1us; 32768us; 60us; 49us; 26us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 40us; 81us; 45us; 50us; 52us; 139us; 59us; 34us; 60us; 33us; 1us; 32768us; 43us; 51us; 1us; 32768us; 60us; 52us; 1us; 32768us; 46us; 53us; 1us; 32768us; 44us; 54us; 1us; 32768us; 60us; 55us; 26us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 40us; 81us; 45us; 50us; 52us; 139us; 59us; 34us; 60us; 33us; 1us; 32768us; 47us; 57us; 0us; 16407us; 1us; 32768us; 49us; 59us; 1us; 32768us; 60us; 60us; 26us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 40us; 81us; 45us; 50us; 52us; 139us; 59us; 34us; 60us; 33us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 1us; 32768us; 60us; 63us; 26us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 40us; 81us; 45us; 50us; 52us; 139us; 59us; 34us; 60us; 33us; 0us; 16410us; 1us; 32768us; 26us; 67us; 2us; 32768us; 26us; 67us; 30us; 73us; 1us; 32768us; 27us; 68us; 1us; 32768us; 4us; 69us; 2us; 16412us; 31us; 95us; 32us; 98us; 2us; 16414us; 28us; 77us; 29us; 79us; 1us; 32768us; 60us; 72us; 26us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 86us; 8us; 36us; 9us; 38us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 17us; 29us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 25us; 65us; 31us; 95us; 32us; 98us; 33us; 129us; 34us; 131us; 40us; 81us; 45us; 50us; 52us; 139us; 59us; 34us; 60us; 33us; 1us; 32768us; 27us; 74us; 1us; 32768us; 4us; 75us; 0us; 16411us; 0us; 16413us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 0us; 16415us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 0us; 16416us; 1us; 32768us; 41us; 82us; 1us; 32768us; 42us; 83us; 1us; 32768us; 4us; 84us; 1us; 16420us; 50us; 93us; 0us; 16417us; 2us; 16436us; 6us; 89us; 51us; 87us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 0us; 16418us; 1us; 32768us; 7us; 90us; 1us; 32768us; 42us; 91us; 5us; 32768us; 54us; 147us; 55us; 149us; 56us; 148us; 57us; 150us; 58us; 151us; 0us; 16419us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 0us; 16421us; 1us; 32768us; 27us; 96us; 1us; 32768us; 4us; 97us; 0us; 16422us; 1us; 32768us; 27us; 99us; 1us; 32768us; 4us; 100us; 0us; 16423us; 0us; 16424us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 1us; 32768us; 23us; 104us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 0us; 16425us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 1us; 32768us; 23us; 108us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 0us; 16426us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 1us; 32768us; 23us; 112us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 0us; 16427us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 2us; 32768us; 21us; 116us; 23us; 122us; 0us; 16428us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 1us; 32768us; 42us; 119us; 5us; 32768us; 54us; 147us; 55us; 149us; 56us; 148us; 57us; 150us; 58us; 151us; 0us; 16429us; 0us; 16430us; 16us; 32768us; 0us; 127us; 1us; 126us; 2us; 125us; 3us; 124us; 4us; 128us; 12us; 143us; 13us; 145us; 14us; 135us; 15us; 137us; 19us; 134us; 20us; 114us; 22us; 117us; 24us; 141us; 33us; 129us; 34us; 131us; 52us; 139us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 2us; 32768us; 18us; 133us; 53us; 130us; 0us; 16437us; 1us; 32768us; 53us; 132us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 1us; 32768us; 53us; 136us; 0us; 16441us; 1us; 32768us; 53us; 138us; 0us; 16442us; 1us; 32768us; 53us; 140us; 0us; 16443us; 1us; 32768us; 53us; 142us; 0us; 16444us; 1us; 32768us; 53us; 144us; 0us; 16445us; 1us; 32768us; 53us; 146us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 0us; 16449us; 0us; 16450us; 0us; 16451us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 4us; 6us; 33us; 61us; 62us; 63us; 90us; 117us; 146us; 173us; 202us; 229us; 230us; 232us; 233us; 235us; 236us; 238us; 239us; 241us; 242us; 244us; 245us; 247us; 248us; 250us; 251us; 253us; 254us; 256us; 257us; 258us; 275us; 277us; 279us; 280us; 282us; 284us; 288us; 289us; 290us; 291us; 292us; 298us; 300us; 327us; 329us; 356us; 358us; 360us; 362us; 364us; 366us; 393us; 395us; 396us; 398us; 400us; 427us; 444us; 446us; 473us; 474us; 476us; 479us; 481us; 483us; 486us; 489us; 491us; 518us; 520us; 522us; 523us; 524us; 541us; 542us; 559us; 560us; 562us; 564us; 566us; 568us; 569us; 572us; 589us; 590us; 592us; 594us; 600us; 601us; 618us; 619us; 621us; 623us; 624us; 626us; 628us; 629us; 630us; 647us; 649us; 666us; 667us; 684us; 686us; 703us; 704us; 721us; 723us; 740us; 741us; 758us; 761us; 762us; 779us; 781us; 787us; 788us; 789us; 806us; 807us; 808us; 809us; 810us; 811us; 812us; 815us; 816us; 818us; 819us; 820us; 821us; 823us; 824us; 826us; 827us; 829us; 830us; 832us; 833us; 835us; 836us; 838us; 839us; 840us; 841us; 842us; 843us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 4us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 1us; 2us; 2us; 4us; 1us; 2us; 2us; 4us; 3us; 9us; 0us; 4us; 5us; 12us; 0us; 1us; 0us; 2us; 2us; 5us; 3us; 5us; 0us; 2us; 3us; 3us; 1us; 4us; 4us; 4us; 3us; 4us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 6us; 7us; 8us; 8us; 8us; 9us; 10us; 11us; 12us; 12us; 12us; 13us; 14us; 14us; 15us; 15us; 15us; 16us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 21us; 21us; 21us; 22us; 22us; 23us; 23us; 24us; 24us; 24us; 24us; 24us; 24us; 25us; 25us; 25us; 25us; 25us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 65535us; 65535us; 16386us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 16389us; 65535us; 16390us; 65535us; 16391us; 65535us; 16392us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 16396us; 65535us; 16397us; 16398us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 16401us; 16402us; 16403us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 16413us; 65535us; 16415us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 16418us; 65535us; 65535us; 65535us; 16419us; 65535us; 16421us; 65535us; 65535us; 16422us; 65535us; 65535us; 16423us; 16424us; 65535us; 65535us; 65535us; 16425us; 65535us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 16427us; 65535us; 65535us; 16428us; 65535us; 65535us; 65535us; 16429us; 16430us; 65535us; 16431us; 16432us; 16433us; 16434us; 16435us; 16436us; 65535us; 16437us; 65535us; 16438us; 16439us; 16440us; 65535us; 16441us; 65535us; 16442us; 65535us; 16443us; 65535us; 16444us; 65535us; 16445us; 65535us; 16446us; 16447us; 16448us; 16449us; 16450us; 16451us; |]
let _fsyacc_reductions ()  =    [| 
# 517 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  AST.Statement list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 526 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                      _1 
                   )
# 29 "Parser.fsy"
                 :  AST.Statement list ));
# 537 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                                          reverseAndCleanStatements _3 
                   )
# 32 "Parser.fsy"
                 : 'Program));
# 548 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                    [ _1 ] 
                   )
# 35 "Parser.fsy"
                 : 'StatementList));
# 559 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatementList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                                  _2 :: _1  
                   )
# 36 "Parser.fsy"
                 : 'StatementList));
# 571 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Print)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                           _1 
                   )
# 39 "Parser.fsy"
                 : 'Statement));
# 582 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Variable)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                             _1 
                   )
# 40 "Parser.fsy"
                 : 'Statement));
# 593 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Conditional)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                               _1 
                   )
# 41 "Parser.fsy"
                 : 'Statement));
# 604 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Switch)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                           Switch _1 
                   )
# 42 "Parser.fsy"
                 : 'Statement));
# 615 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Loop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                          _1 
                   )
# 43 "Parser.fsy"
                 : 'Statement));
# 626 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                              Declaration ( "IT", _1) 
                   )
# 44 "Parser.fsy"
                 : 'Statement));
# 637 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Unary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                           UnaryStmt  _1 
                   )
# 45 "Parser.fsy"
                 : 'Statement));
# 648 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                          Break 
                   )
# 46 "Parser.fsy"
                 : 'Statement));
# 658 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Input)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                           _1 
                   )
# 47 "Parser.fsy"
                 : 'Statement));
# 669 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                      Empty 
                   )
# 48 "Parser.fsy"
                 : 'Statement));
# 679 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpressionList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                Print (Concatenate (List.rev _2)) 
                   )
# 51 "Parser.fsy"
                 : 'Print));
# 690 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                            Input _2 
                   )
# 54 "Parser.fsy"
                 : 'Input));
# 701 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Cases)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                reverseAndCleanStatements _3 
                   )
# 57 "Parser.fsy"
                 : 'Switch));
# 712 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Case)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                               [ _1 ] 
                   )
# 60 "Parser.fsy"
                 : 'Cases));
# 723 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Cases)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Case)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                     _2 :: _1 
                   )
# 61 "Parser.fsy"
                 : 'Cases));
# 735 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Cases)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'DefaultCase)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                             List.append _2  _1  
                   )
# 62 "Parser.fsy"
                 : 'Cases));
# 747 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Literal)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                            Conditional( Comparison(Equals, Identifier("IT"), _2 ),  reverseAndCleanStatements _4, [])  
                   )
# 65 "Parser.fsy"
                 : 'Case));
# 759 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                       _3 
                   )
# 68 "Parser.fsy"
                 : 'DefaultCase));
# 770 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatementList)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Mebbe)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                                                 Conditional( Identifier "IT", reverseAndCleanStatements _7, _8 ) 
                   )
# 72 "Parser.fsy"
                 : 'Conditional));
# 782 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                          [] 
                   )
# 75 "Parser.fsy"
                 : 'Mebbe));
# 792 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                       _4 
                   )
# 76 "Parser.fsy"
                 : 'Mebbe));
# 803 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatementList)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Mebbe)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                                       [ Conditional( _2, reverseAndCleanStatements _4, reverseAndCleanStatements _5 ) ]
                   )
# 77 "Parser.fsy"
                 : 'Mebbe));
# 816 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'LoopOperation)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'LoopTerminator)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatementList)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                                                                                        Loop (_5, _6, reverseAndCleanStatements _8) 
                   )
# 80 "Parser.fsy"
                 : 'Loop));
# 831 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                          LoopOperator.Empty 
                   )
# 83 "Parser.fsy"
                 : 'LoopOperation));
# 841 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Unary)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                 Operation _1 
                   )
# 84 "Parser.fsy"
                 : 'LoopOperation));
# 852 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                          LoopTerminator.Empty 
                   )
# 87 "Parser.fsy"
                 : 'LoopTerminator));
# 862 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                         Til _2 
                   )
# 88 "Parser.fsy"
                 : 'LoopTerminator));
# 873 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                          Wile _2 
                   )
# 89 "Parser.fsy"
                 : 'LoopTerminator));
# 884 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'VariableInitializer)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                                 Declaration (_4, _5) 
                   )
# 92 "Parser.fsy"
                 : 'Variable));
# 896 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                  Declaration (_1, _3) 
                   )
# 93 "Parser.fsy"
                 : 'Variable));
# 908 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                    Declaration (_1, Cast(Identifier(_1), _5)) 
                   )
# 94 "Parser.fsy"
                 : 'Variable));
# 920 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                          Noob 
                   )
# 97 "Parser.fsy"
                 : 'VariableInitializer));
# 930 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                         _2 
                   )
# 98 "Parser.fsy"
                 : 'VariableInitializer));
# 941 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                              Numeric (_3, 1) 
                   )
# 101 "Parser.fsy"
                 : 'Unary));
# 952 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                               Numeric (_3, -1) 
                   )
# 102 "Parser.fsy"
                 : 'Unary));
# 963 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                  _1 
                   )
# 105 "Parser.fsy"
                 : 'Expression));
# 974 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CalcOperator)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                                Calc (_1, _2, _4) 
                   )
# 106 "Parser.fsy"
                 : 'Expression));
# 987 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BooleanOperator)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                                   Boolean (_1, _2, _4) 
                   )
# 107 "Parser.fsy"
                 : 'Expression));
# 1000 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ComparisonOperator)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                                      Comparison (_1, _2, _4) 
                   )
# 108 "Parser.fsy"
                 : 'Expression));
# 1013 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpressionList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                     Concatenate (List.rev _2) 
                   )
# 109 "Parser.fsy"
                 : 'Expression));
# 1024 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                 Cast (_2, _4) 
                   )
# 110 "Parser.fsy"
                 : 'Expression));
# 1036 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                     [ _1 ] 
                   )
# 113 "Parser.fsy"
                 : 'ExpressionList));
# 1047 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpressionList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                       _3 :: _1 
                   )
# 114 "Parser.fsy"
                 : 'ExpressionList));
# 1059 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                 Yarn _1 
                   )
# 117 "Parser.fsy"
                 : 'Literal));
# 1070 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                  Numbr _1 
                   )
# 118 "Parser.fsy"
                 : 'Literal));
# 1081 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                  Numbar _1 
                   )
# 119 "Parser.fsy"
                 : 'Literal));
# 1092 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                  Troof _1 
                   )
# 120 "Parser.fsy"
                 : 'Literal));
# 1103 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                     Identifier _1 
                   )
# 121 "Parser.fsy"
                 : 'Literal));
# 1114 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                  And 
                   )
# 124 "Parser.fsy"
                 : 'BooleanOperator));
# 1124 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                    Or 
                   )
# 125 "Parser.fsy"
                 : 'BooleanOperator));
# 1134 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                    Equals 
                   )
# 128 "Parser.fsy"
                 : 'ComparisonOperator));
# 1144 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                   NotEquals 
                   )
# 129 "Parser.fsy"
                 : 'ComparisonOperator));
# 1154 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                    Greater 
                   )
# 133 "Parser.fsy"
                 : 'CalcOperator));
# 1164 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                     Lesser 
                   )
# 134 "Parser.fsy"
                 : 'CalcOperator));
# 1174 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                  Plus 
                   )
# 135 "Parser.fsy"
                 : 'CalcOperator));
# 1184 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                   Minus 
                   )
# 136 "Parser.fsy"
                 : 'CalcOperator));
# 1194 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                     Mult 
                   )
# 137 "Parser.fsy"
                 : 'CalcOperator));
# 1204 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                      Div 
                   )
# 138 "Parser.fsy"
                 : 'CalcOperator));
# 1214 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                  T_Numbr 
                   )
# 141 "Parser.fsy"
                 : 'Type));
# 1224 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                  T_Troof 
                   )
# 142 "Parser.fsy"
                 : 'Type));
# 1234 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                   T_Numbar 
                   )
# 143 "Parser.fsy"
                 : 'Type));
# 1244 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                 T_Yarn 
                   )
# 144 "Parser.fsy"
                 : 'Type));
# 1254 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                 T_Noob 
                   )
# 145 "Parser.fsy"
                 : 'Type));
|]
# 1265 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 64;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  AST.Statement list  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
